Interview Tips:
What is the purpose of the Promise.all() method?

The Promise.all() method is used to handle multiple promises concurrently. It takes an array of promises as input and returns a new promise. This new promise resolves when all the promises in the input array have resolved. The resolved values of the promises are available in the .then() block as an array in the same order as the input promises.
How do you handle errors in promises?

Errors in promises can be handled by using try{} catch(err){} finally block to the promise chain.
What is the difference between synchronous and asynchronous operations?

Synchronous operations block the execution of the program until the operation is complete. They are executed one after the other in a sequential manner. Asynchronous operations, on the other hand, do not block the execution of the program. They allow the program to continue executing other tasks while waiting for the operation to complete. Asynchronous operations are typically used for tasks that may take longer to complete, such as network requests or file operations, to avoid blocking the main execution thread.
What are the differences between callbacks and promises in JavaScript? When would you prefer using promises over callbacks? Also what is callback hell and how to alleviate it?

Callbacks are a traditional way to handle asynchronous operations in JavaScript. They are functions passed as arguments to other functions and get invoked once the asynchronous operation completes. Promises, on the other hand, are objects that represent the eventual completion (or failure) of an asynchronous operation. Promises provide more structured and readable code compared to callbacks. In general promises are generally preferred over callbacks when dealing with complex asynchronous operations, error handling, and code readability.
In callback hell, the code structure becomes deeply nested, with each callback being passed as an argument to another callback. This nesting can quickly become complex and make the code hard to follow, leading to issues such as code duplication, error handling problems, and difficulties in maintaining and debugging the code. To alleviate callback hell, several approaches can be used, such as using named functions, utilizing control flow libraries (e.g., async.js or Promises), or utilizing modern JavaScript features like async/await. These approaches help flatten the code structure and make it more readable and maintainable by avoiding excessive nesting of callbacks.
Explain the purpose of the .catch() method in promises. How does it differ from the .then() method?

The .catch() method in promises is used for error handling. It allows you to specify a callback function that will be invoked when a promise is rejected or encounters an error during its execution while on the other side .then() is used to handle fulfilled promises and successful outcomes.
What is the difference between Promise.resolve() and Promise.reject()?

Promise.resolve(): It returns a promise that is resolved with a given value. If the provided value is already a promise, it is returned as is. If the value is not a promise, Promise.resolve() creates a new promise that is immediately resolved with the provided value. For example:
Promise.reject(): It returns a promise that is rejected with a given reason or error. The provided reason or error is treated as the rejection reason for the promise.
For example:
const rejectedPromise = Promise.reject(new Error('Something went wrong'));
In general Promise.resolve() is often used when you want to create a promise that immediately resolves with a specific value while Promise.reject() is used when you want to create a promise that immediately rejects with a specific error or reason.
